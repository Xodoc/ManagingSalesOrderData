@page "/subelement/add"
@page "/subelement/edit/{subElementId:int}"
@using ManagingSalesOrderData.Shared.Dtos
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>@Title SubElement</h1>
<hr />

<EditForm Model="@subElement" OnValidSubmit="SaveOrder">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Element" class="form-label">Element</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="subElement.Element" />
        </div>
        <ValidationMessage For="@(() => subElement.Element)" />
    </div>
    <div class="mb-3">
        <label for="Type" class="form-label">Type</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="subElement.Type" />
        </div>
        <ValidationMessage For="@(() => subElement.Type)" />
    </div>
    <div class="mb-3">
        <label for="Width" class="form-label">Width</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="subElement.Width" />
        </div>
        <ValidationMessage For="@(() => subElement.Width)" />
    </div>
    <div class="mb-3">
        <label for="Height" class="form-label">Height</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="subElement.Height" />
        </div>
        <ValidationMessage For="@(() => subElement.Height)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int SubElementId { get; set; }
    protected string Title = "Add";
    protected SubElementDto subElement = new();

    protected override async Task OnParametersSetAsync()
    {
        if (SubElementId != 0)
        {
            Title = "Edit";
            subElement = await Http.GetFromJsonAsync<SubElementDto>("api/subelement/" + SubElementId);
        }
    }

    protected async Task SaveOrder()
    {
        if (subElement.Id != 0)
        {
            await Http.PutAsJsonAsync("api/subelement", subElement);
        }
        else
        {
            await Http.PostAsJsonAsync("api/subelement", subElement);
        }

        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/subelements");
    }
}